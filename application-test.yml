spring:
  application:
    name: lagou-service-gatway
  #网关的配置
  cloud:
    gateway:
      #配置路由:网关最基础的部分，也是网关的比较基础工作单元
      #路由一般由一个ID（不给的话底层会自动赋值一个UUID）
      #        一个目标URL(最终路由到的地址)
      #        一系列单元（匹配的条件判断，如http请求中的所有内容，如请求头，请求参数）
      #        Filter过滤器（精细化控制，在执行请求的之前或者之后）
      #  一般断言为true，则匹配路由的url
      # 易错点：-和id之间一定是有空格的，断言中的path路径的前缀P一定是大写
      routes:
        - id: service-page-router
          #动态路由：从注册中心获取对应服务实例,lb表示load balanced
          uri: lb://lagou-service-page
#          uri: http://127.0.0.1:9100
          #断言 开发人员可以匹配Http请求中的所有内容（包括请求头、请求参数等）,如果断言与请求相匹配则路由。
          predicates:
            - Path=/page/**
        - id: service-product-router
          uri: lb://lagou-service-product
#          uri: http://127.0.0.1:9000
           #断言
          predicates:
            - Path=/product/**
          filters:
            #访问请求中加上prodcut是为了满足断言判断，断言成功后，交给具体uri所对应的
            #微服务，该过滤是将uri中第一个参数去掉
            #http://127.0.0.1:9300/product/service/port
            #http://127.0.0.1:9300/service/port-->商品微服务
            - StripPrefix=1
server:
  port: 9300



eureka:
  client: #Eureka server本身也是eureka的一个客户端，因为在集群模式下需要与其他eureka server进行数据同步的复制
    service-url: # 客户端与EurekaServer交互的地址，如果是集群，也需要写其它Server的地址
      defaultZone: http://LagouCloudEurekaServerB:9201/eureka/,http://LagouCloudEurekaServerA:9200/eureka/
      #表示是否向Eureka中心注册自己的信息，因为该配置对应是Eureka client,
      #其单例本身也是Eureka server 因此不用自己client向自己server注册
    register-with-eureka: true
    #是否查询/拉取Eureka server的服务注册列表
    fetch-registry: true
    #从eureka server拉取服务注册表的时间设置
    registry-fetch-interval-seconds: 30
  instance:
    #当前eureka的实例主机名
    #    hostname: localhost
    #使用ip注册，否则会使用主机名进行注册(此处考虑老版本注册，新版本经测试都是ip注册)
    prefer-ip-address: true
    #自定义实例显示格式,加上版本，便于多版本管理，注意是ip-addresss，早期版本是ipAddress
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}:@project.version@